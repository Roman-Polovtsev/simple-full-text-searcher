package ru.polovtsev.leetcode.sliding;import java.util.HashMap;import java.util.HashSet;import java.util.Set;public class LongestSubstringWithoutRepeatingCharacters3 {//    public int lengthOfLongestSubstring(String s) {//        var set = new HashSet<Character>();//        var left = 0;//        var right = 0;//        var max = 0;//        while (right < s.length()) {//            char currentSymbol = s.charAt(right);//            if (!set.contains(currentSymbol)){//                set.add(currentSymbol);//                max = Math.max(max, set.size());//                right++;//            } else {//                char existingSymbol = s.charAt(left);//                set.remove(existingSymbol);//                left++;//            }//        }//        return max;//    }    public int lengthOfLongestSubstring(String s) {        int left =0;        int right = 1;        int max= 0;        Set<Character> set = new HashSet<Character>();        while (right < s.length()) {            if (!set.contains(s.charAt(right))) {                set.add(s.charAt(right));                max = Math.max(max, set.size());                right++;            } else {                set.remove(s.charAt(left));                left++;                right = left + 1;            }        }        return max;    }    public static void main(String[] args) {        LongestSubstringWithoutRepeatingCharacters3 a = new LongestSubstringWithoutRepeatingCharacters3();        int res = a.lengthOfLongestSubstring("abcabcbb");        System.out.println(res);    }}